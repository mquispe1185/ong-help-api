require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/cities", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # City. As you add validations to City, be sure to
  # adjust the attributes here as well.
  before(:each) do
    @current_user = FactoryBot.create(:user)
    @new_auth_header = @current_user.create_new_auth_token
  end

  let(:province) { FactoryBot.create(:province) }

  let(:valid_attributes) {
    { "province_id" => province.id, "name" => "City Name" }
  }

  let(:invalid_attributes) {
    { "province_id" => province.id, "name" => "" }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # CitiesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      City.create! valid_attributes
      get cities_url, headers: @new_auth_header
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      city = City.create! valid_attributes
      get city_url(city), headers: @new_auth_header
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new City" do
        expect {
          post cities_url,
              params: { city: valid_attributes }, headers: @new_auth_header
        }.to change(City, :count).by(1)
      end

      it "renders a JSON response with the new city" do
        post cities_url,
            params: { city: valid_attributes }, headers: @new_auth_header
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new City" do
        expect {
          post cities_url,
              params: { city: invalid_attributes }, as: :json
        }.to change(City, :count).by(0)
      end

      it "renders a JSON response with errors for the new city" do
        post cities_url,
            params: { city: invalid_attributes }, headers: @new_auth_header
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { "name" => "New City Name" }
      }

      it "updates the requested city" do
        city = City.create! valid_attributes
        patch city_url(city),
              params: { city: new_attributes }, headers: @new_auth_header
        city.reload
        expect(assigns(:city).attributes['name']).to eq(new_attributes['name'])
      end

      it "renders a JSON response with the city" do
        city = City.create! valid_attributes
        patch city_url(city),
              params: { city: new_attributes }, headers: @new_auth_header
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the city" do
        city = City.create! valid_attributes
        patch city_url(city),
              params: { city: invalid_attributes }, headers: @new_auth_header
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested city" do
      city = City.create! valid_attributes
      expect {
        delete city_url(city), headers: @new_auth_header
      }.to change(City, :count).by(-1)
    end
  end
end
