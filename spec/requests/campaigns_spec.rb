require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/campaigns", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Campaign. As you add validations to Campaign, be sure to
  # adjust the attributes here as well.
  before(:each) do
    @current_user = FactoryBot.create(:user)
    @new_auth_header = @current_user.create_new_auth_token
  end

  let(:category) { FactoryBot.create(:category) }
  let(:province) { FactoryBot.create(:province) }
  let(:city)     { FactoryBot.create(:city) }

  let(:valid_attributes) {
    { "name" => "Campaign Name",
      "category_id" => category.id,
      "province_id" => province.id,
      "city_id" => city.id,
      "user_id" => @current_user.id,
      "updated_by_id" => @current_user.id,
      "description" => Faker::Lorem.sentence,
      "phone" => Faker::Number.number(digits: 10),
      "email" => Faker::Internet.email,
      "video_url" => Faker::Internet.url }
  }

  let(:invalid_attributes) {
    { "name" => "",
      "category_id" => category.id,
      "province_id" => province.id,
      "city_id" => city.id,
      "user_id" => @current_user.id,
      "updated_by_id" => @current_user.id,
      "description" => Faker::Lorem.sentence,
      "phone" => Faker::Number.number(digits: 10),
      "email" => Faker::Internet.email,
      "video_url" => Faker::Internet.url }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # CampaignsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      Campaign.create! valid_attributes
      get campaigns_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      campaign = Campaign.create! valid_attributes
      get campaign_url(campaign), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Campaign" do
        expect {
          post campaigns_url,
              params: { campaign: valid_attributes }, headers: @new_auth_header
        }.to change(Campaign, :count).by(1)
      end

      it "renders a JSON response with the new campaign" do
        post campaigns_url,
            params: { campaign: valid_attributes }, headers: @new_auth_header
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Campaign" do
        expect {
          post campaigns_url,
              params: { campaign: invalid_attributes }, as: :json
        }.to change(Campaign, :count).by(0)
      end

      it "renders a JSON response with errors for the new campaign" do
        post campaigns_url,
            params: { campaign: invalid_attributes }, headers: @new_auth_header
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { "name" => "New Campaign Name" }
      }

      it "updates the requested campaign" do
        campaign = Campaign.create! valid_attributes
        patch campaign_url(campaign),
              params: { campaign: new_attributes }, headers: @new_auth_header
        campaign.reload
        expect(assigns(:campaign).attributes['name']).to eq(new_attributes['name'])
      end

      it "renders a JSON response with the campaign" do
        campaign = Campaign.create! valid_attributes
        patch campaign_url(campaign),
              params: { campaign: new_attributes }, headers: @new_auth_header
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the campaign" do
        campaign = Campaign.create! valid_attributes
        patch campaign_url(campaign),
              params: { campaign: invalid_attributes }, headers: @new_auth_header
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested campaign" do
      campaign = Campaign.create! valid_attributes
      expect {
        delete campaign_url(campaign), headers: @new_auth_header
      }.to change(Campaign, :count).by(-1)
    end
  end
end
